diff -ruN rustc-1.36.0-src-orig/src/bootstrap/compile.rs rustc-1.36.0-src/src/bootstrap/compile.rs
--- rustc-1.36.0-src-orig/src/bootstrap/compile.rs	2019-07-03 17:00:00.000000000 +0900
+++ rustc-1.36.0-src/src/bootstrap/compile.rs	2019-07-17 18:46:33.113431746 +0900
@@ -115,28 +115,6 @@
 fn copy_third_party_objects(builder: &Builder<'_>, compiler: &Compiler, target: Interned<String>) {
     let libdir = builder.sysroot_libdir(*compiler, target);
 
-    // Copies the crt(1,i,n).o startup objects
-    //
-    // Since musl supports fully static linking, we can cross link for it even
-    // with a glibc-targeting toolchain, given we have the appropriate startup
-    // files. As those shipped with glibc won't work, copy the ones provided by
-    // musl so we have them on linux-gnu hosts.
-    if target.contains("musl") {
-        for &obj in &["crt1.o", "crti.o", "crtn.o"] {
-            builder.copy(
-                &builder.musl_root(target).unwrap().join("lib").join(obj),
-                &libdir.join(obj),
-            );
-        }
-    } else if target.ends_with("-wasi") {
-        for &obj in &["crt1.o"] {
-            builder.copy(
-                &builder.wasi_root(target).unwrap().join("lib/wasm32-wasi").join(obj),
-                &libdir.join(obj),
-            );
-        }
-    }
-
     // Copies libunwind.a compiled to be linked wit x86_64-fortanix-unknown-sgx.
     //
     // This target needs to be linked to Fortanix's port of llvm's libunwind.
diff -ruN rustc-1.36.0-src-orig/src/bootstrap/sanity.rs rustc-1.36.0-src/src/bootstrap/sanity.rs
--- rustc-1.36.0-src-orig/src/bootstrap/sanity.rs	2019-07-03 17:00:00.000000000 +0900
+++ rustc-1.36.0-src/src/bootstrap/sanity.rs	2019-07-17 18:46:17.297693668 +0900
@@ -176,34 +176,6 @@
             }
         }
 
-        // Make sure musl-root is valid
-        if target.contains("musl") {
-            // If this is a native target (host is also musl) and no musl-root is given,
-            // fall back to the system toolchain in /usr before giving up
-            if build.musl_root(*target).is_none() && build.config.build == *target {
-                let target = build.config.target_config.entry(target.clone())
-                    .or_default();
-                target.musl_root = Some("/usr".into());
-            }
-            match build.musl_root(*target) {
-                Some(root) => {
-                    if fs::metadata(root.join("lib/libc.a")).is_err() {
-                        panic!("couldn't find libc.a in musl dir: {}",
-                               root.join("lib").display());
-                    }
-                    if fs::metadata(root.join("lib/libunwind.a")).is_err() {
-                        panic!("couldn't find libunwind.a in musl dir: {}",
-                               root.join("lib").display());
-                    }
-                }
-                None => {
-                    panic!("when targeting MUSL either the rust.musl-root \
-                            option or the target.$TARGET.musl-root option must \
-                            be specified in config.toml")
-                }
-            }
-        }
-
         if target.contains("msvc") {
             // There are three builds of cmake on windows: MSVC, MinGW, and
             // Cygwin. The Cygwin build does not have generators for Visual
diff -ruN rustc-1.36.0-src-orig/src/librustc_codegen_ssa/back/link.rs rustc-1.36.0-src/src/librustc_codegen_ssa/back/link.rs
--- rustc-1.36.0-src-orig/src/librustc_codegen_ssa/back/link.rs	2019-07-03 17:00:00.000000000 +0900
+++ rustc-1.36.0-src/src/librustc_codegen_ssa/back/link.rs	2019-07-17 18:49:58.998058270 +0900
@@ -1058,12 +1058,9 @@
         let mut position_independent_executable = false;
 
         if t.options.position_independent_executables {
-            let empty_vec = Vec::new();
-            let args = sess.opts.cg.link_args.as_ref().unwrap_or(&empty_vec);
-            let more_args = &sess.opts.cg.link_arg;
-            let mut args = args.iter().chain(more_args.iter()).chain(used_link_args.iter());
 
-            if is_pic(sess) && !sess.crt_static() && !args.any(|x| *x == "-static") {
+            let static_pie = t.options.static_position_independent_executables;
+            if is_pic(sess) && (!sess.crt_static() || static_pie) {
                 position_independent_executable = true;
             }
         }
diff -ruN rustc-1.36.0-src-orig/src/librustc_target/spec/linux_musl_base.rs rustc-1.36.0-src/src/librustc_target/spec/linux_musl_base.rs
--- rustc-1.36.0-src-orig/src/librustc_target/spec/linux_musl_base.rs	2019-07-03 17:00:00.000000000 +0900
+++ rustc-1.36.0-src/src/librustc_target/spec/linux_musl_base.rs	2019-07-17 18:45:42.114277937 +0900
@@ -26,9 +26,12 @@
     base.post_link_objects_crt.push("crtn.o".to_string());
 
     // These targets statically link libc by default
-    base.crt_static_default = true;
+    base.crt_static_default = false;
     // These targets allow the user to choose between static and dynamic linking.
     base.crt_static_respected = true;
 
+    // Static position-independent executables are supported.
+    base.static_position_independent_executables = true;
+
     base
 }
diff -ruN rustc-1.36.0-src-orig/src/librustc_target/spec/mod.rs rustc-1.36.0-src/src/librustc_target/spec/mod.rs
--- rustc-1.36.0-src-orig/src/librustc_target/spec/mod.rs	2019-07-03 17:00:00.000000000 +0900
+++ rustc-1.36.0-src/src/librustc_target/spec/mod.rs	2019-07-17 18:44:27.775520578 +0900
@@ -640,6 +640,8 @@
     /// the functions in the executable are not randomized and can be used
     /// during an exploit of a vulnerability in any code.
     pub position_independent_executables: bool,
+    /// As above, but also support for static position independent executables.
+    pub static_position_independent_executables: bool,
     /// Determines if the target always requires using the PLT for indirect
     /// library calls or not. This controls the default value of the `-Z plt` flag.
     pub needs_plt: bool,
@@ -806,6 +808,7 @@
             has_rpath: false,
             no_default_libraries: true,
             position_independent_executables: false,
+            static_position_independent_executables: false,
             needs_plt: false,
             relro_level: RelroLevel::None,
             pre_link_objects_exe: Vec::new(),
@@ -1121,6 +1124,7 @@
         key!(has_rpath, bool);
         key!(no_default_libraries, bool);
         key!(position_independent_executables, bool);
+        key!(static_position_independent_executables, bool);
         key!(needs_plt, bool);
         key!(relro_level, RelroLevel)?;
         key!(archive_format);
@@ -1336,6 +1340,7 @@
         target_option_val!(has_rpath);
         target_option_val!(no_default_libraries);
         target_option_val!(position_independent_executables);
+        target_option_val!(static_position_independent_executables);
         target_option_val!(needs_plt);
         target_option_val!(relro_level);
         target_option_val!(archive_format);
diff -ruN rustc-1.36.0-src-orig/src/libunwind/build.rs rustc-1.36.0-src/src/libunwind/build.rs
--- rustc-1.36.0-src-orig/src/libunwind/build.rs	2019-07-03 17:00:00.000000000 +0900
+++ rustc-1.36.0-src/src/libunwind/build.rs	2019-07-17 18:42:49.053190446 +0900
@@ -11,9 +11,7 @@
         #[cfg(feature = "llvm-libunwind")]
         llvm_libunwind::compile();
     } else if target.contains("linux") {
-        if target.contains("musl") {
-            // musl is handled in lib.rs
-        } else if !target.contains("android") {
+        if !target.contains("android") {
             println!("cargo:rustc-link-lib=gcc_s");
         }
     } else if target.contains("freebsd") {
diff -ruN rustc-1.36.0-src-orig/src/libunwind/lib.rs rustc-1.36.0-src/src/libunwind/lib.rs
--- rustc-1.36.0-src-orig/src/libunwind/lib.rs	2019-07-03 17:00:00.000000000 +0900
+++ rustc-1.36.0-src/src/libunwind/lib.rs	2019-07-17 18:50:30.413548487 +0900
@@ -24,8 +24,3 @@
         pub use libunwind::*;
     }
 }
-
-#[cfg(target_env = "musl")]
-#[link(name = "unwind", kind = "static", cfg(target_feature = "crt-static"))]
-#[link(name = "gcc_s", cfg(not(target_feature = "crt-static")))]
-extern {}
diff -ruN rustc-1.36.0-src-orig/vendor/libc/src/unix/mod.rs rustc-1.36.0-src/vendor/libc/src/unix/mod.rs
--- rustc-1.36.0-src-orig/vendor/libc/src/unix/mod.rs	2019-07-03 18:36:20.000000000 +0900
+++ rustc-1.36.0-src/vendor/libc/src/unix/mod.rs	2019-07-17 18:41:58.354058087 +0900
@@ -306,13 +306,6 @@
     } else if #[cfg(feature = "use_std")] {
         // cargo build, don't pull in anything extra as the libstd dep
         // already pulls in all libs.
-    } else if #[cfg(target_env = "musl")] {
-        #[cfg_attr(feature = "rustc-dep-of-std",
-                   link(name = "c", kind = "static",
-                        cfg(target_feature = "crt-static")))]
-        #[cfg_attr(feature = "rustc-dep-of-std",
-                   link(name = "c", cfg(not(target_feature = "crt-static"))))]
-        extern {}
     } else if #[cfg(target_os = "emscripten")] {
         #[link(name = "c")]
         extern {}
diff -ruN rustc-1.36.0-src-orig/vendor/openssl-sys/build/main.rs rustc-1.36.0-src/vendor/openssl-sys/build/main.rs
--- rustc-1.36.0-src-orig/vendor/openssl-sys/build/main.rs	2019-07-03 18:36:21.000000000 +0900
+++ rustc-1.36.0-src/vendor/openssl-sys/build/main.rs	2019-07-17 18:41:24.262645805 +0900
@@ -199,6 +199,7 @@
             (8, 1) => ('8', '1'),
             (8, _) => ('8', 'x'),
             (9, 0) => ('9', '0'),
+            (9, _) => ('9', 'x'),
             _ => version_error(),
         };
 
