# description	: Collection of modular and reusable compiler and toolchain technologies
# depends	: cmake libffi python2 ninja

name=llvm
version=8.0.0
release=1
source=(http://llvm.org/releases/$version/$name-$version.src.tar.xz
	http://llvm.org/releases/$version/cfe-$version.src.tar.xz
	http://llvm.org/releases/$version/compiler-rt-$version.src.tar.xz
	llvm-config.h
	llvm-001-musl.patch
	0001-add-musl-triplets.patch)
md5sum=(74818f431563603515a62be1ee69a142
	988b59cdb372c5a4f44ae4c39df3de73
	547893456e22c75d16189a13881bc866
	295c343dcd457dc534662f011d7cff1a
	SKIP SKIP)

build() {
	cd $name-$version.src

	patch -Np1 -i ../llvm-001-musl.patch
	patch -Np1 -i ../0001-add-musl-triplets.patch -d ../cfe-$version.src

	export CC=gcc
	export CXX=g++

	mv ../cfe-$version.src tools/clang
	mv ../compiler-rt-$version.src projects/compiler-rt

	sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' projects/compiler-rt/cmake/config-ix.cmake

	mkdir -v build
	cd       build
	
	cmake .. -G Ninja \
	      -DCMAKE_INSTALL_PREFIX=/usr \
	      -DLLVM_ENABLE_FFI=ON \
	      -DCMAKE_BUILD_TYPE=Release \
	      -DLLVM_BUILD_LLVM_DYLIB=ON \
      	      -DLLVM_LINK_LLVM_DYLIB=ON \
	      -DLLVM_ENABLE_RTTI=ON \
	      -DLLVM_TARGETS_TO_BUILD="X86;AMDGPU;BPF" \
	      -DLIBCLANG_BUILD_STATIC=ON \
	      -Wno-dev
	ninja
	DESTDIR=$PKG ninja install

	#mv $PKG/usr/include/llvm/Config/llvm-config{,-64}.h
	#cp $SRC/llvm-config.h $PKG/usr/include/llvm/Config/llvm-config.h

	mkdir -p $PKG/usr/lib/llvm
	mv $PKG/usr/libexec/{c++-analyzer,ccc-analyzer} $PKG/usr/lib/llvm
	rmdir $PKG/usr/libexec
	sed -i 's|libexec|lib/llvm|' $PKG/usr/bin/scan-build
}
